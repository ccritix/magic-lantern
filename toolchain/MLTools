#!/bin/bash

# UNDER DEVELOPMENT, pre-alpha version
# MLTools is a script to prepare your mac for use all Magic Lantern features
# more info on Magic lantern: http://www.magiclantern.fm
# on MLTools: http://www.magiclantern.fm/forum/index.php?topic=1019.0

#SETTINGS=~/.MacOSX/environment.plist
#PLIST=/usr/libexec/PlistBuddy

# if the file doesn't exist, try to create folder
#if [ ! -f $SETTINGS ]
#then
#  mkdir -p ~/.MLTools
#fi

# then just add entries (file will be created if it doesn't exist)
#$PLIST -c "Add :MLsource string '~/magic-lantern'" $SETTINGS
#$PLIST -c "Add :arm_fldr string '~/arm-toolchain'" $SETTINGS
#$PLIST -c "Add :EOS_CARD string '/Volumes/EOS_DIGITAL/'" $SETTINGS
#$PLIST -c "Add :files_fldr string '"$EOS_CARD"DCIM/100CANON'" $SETTINGS
#$PLIST -c "Add :ML_FLDR string '/ML'" $SETTINGS
#$PLIST -c "Add :BIN string 'autoexec.bin'" $SETTINGS

setvar() {
	echo "*******************************************"
	echo "*         Checking Start Options:         *"
	echo "*******************************************"
# CHANGE THIS IF YOU WANT
	MLsource=~/magic-lantern 				# folder with magic lanter sources
	arm_fldr=~/arm-toolchain462 			# summon-arm toolchain location
	EOS_CARD=/Volumes/EOS_DIGITAL/ 			# ML installed card address
	files_fldr="$EOS_CARD"DCIM/100CANON	# folder to check for file to conver on camera
	ML_FLDR=ML/ 							# Ml folder on card
	BIN=autoexec.bin 						# ML bin name
# List of things to install
	BREW_MLdev="
		binutils
		gmp
		mpfr
		libmpc
		mercurial
		wget
		imagemagick
		ufraw
		mplayer
		poppler"
		
		PIP_ML="
		numpy
		PIL
		matplotlib 
		docutils"
	BREW_MLbase="
		mercurial
		imagemagick
		mplayer"

		PIP_ML="
		numpy
		PIL"
		
CONVERT_422_MSG="CONVERT_422_MSG"
HDR_MERGE_MSG="HDR_MERGE_MSG"
FST_MERGE_MSG="FST_MERGE_MSG"
CONVERT_RAW_MSG="CONVERT_RAW_MSG"
}

cd ~/
help() {
	echo ""
	echo "Usage: MLTools [option]"
	echo ""
	echo "At first start this script will check if there are the file"
	echo "needed to perform all conversion, if not here it will install"
	echo "what needed."
	echo ""
	echo "If there is no option set it will try to find and convert"
	echo "all that there is on ML card"
	echo "If there is no ML card it will try to install ML on the "
	echo "eventually avaiable EOS__DIGITAL card mounted and make bootable"
	echo "or it will ask for a folder to search something to convert"
	echo ""
	echo "Options:"
	echo "[folder]     :used for searching something to convert"
	echo "[file]       :used for converting that file"
	echo "h or help    :shows this help"
	echo "i or install :installs base sistem andd clone Unified repo"
	echo "d or dev     :install all the dependencies for the arm"
	echo "              toolchain and starts the summon-arm script"
	echo "remove or r  :uninstall all the dependencies previously installed"
	echo "              it will ask for confirmation"
	exit 0
}
	
	
checkBrewPIP() {
	echo "*******************************************"
	echo "*     Checking for Homebrew and PIP...    *"
	echo "*******************************************"
	if [ $(which brew) ]; then
		echo "Homebrew already installed"
	else
		echo "Installing Homebrew..."
		/usr/bin/ruby -e "$(/usr/bin/curl -fsSL https://raw.github.com/mxcl/homebrew/master/Library/Contributions/install_homebrew.rb)"
		echo "Done"
	    brew doctor
	fi
	echo "Updating Homebrew..."
	brew update
	echo "Done"

	if [ $(which pip) ]; then
		echo "pip already installed"
	else
		echo "Installing pip..."
		sudo easy_install pip
		echo "Done"
	fi
	echo "Updating pip..."
	sudo pip install -U pip
	echo "Done"
}

checkMLs() {
	if [ ! -d "$MLsource" ];then
		hg clone -r unified https://bitbucket.org/hudson/magic-lantern/  
	fi
}

installBase() {
	checkBrewPIP
	BREW_ML="$BREW_MLbase"
	echo "*******************************************"
	echo "*          Installing Base tools:         *"
	echo "*******************************************"
	for f in $BREW_ML; do
		if [ ! $(brew list | grep "$f") ]; then
		echo "$f Installation (brew)"
		brew install "$f"
		else
		echo "$f already installed (brew)"
		fi
	done	
	for f in $PIP_ML; do
		if [ ! $(pip freeze | grep "$f") ]; then
		echo "$f Installation (pip)"
		sudo pip install "$f"
		else
		echo "$f already installed (pip)"
		fi
	done
	if [ ! $(which enfuse) ]; then
		curl O http://downloads.sourceforge.net/project/enblend/enblend-enfuse/enblend-enfuse-4.0/enblend-enfuse-4.0-mac.tar.gz
		echo "enfuse installation (tar)"
		tar xvfz enblend-enfuse-4.0-mac.tar.gz
		cp enblend-enfuse-4.0-mac/enfuse /usr/bin/
		cp enblend-enfuse-4.0-mac/enblend /usr/bin/
		rm -dR enblend-enfuse-4.0-mac
	else
		echo "enfuse already installed"
	fi
	checkMLs
}
	
installDev() {
	installBase
	BREW_ML="$BREW_MLdev"
	echo "*******************************************"
	echo "*      Installing Dev dipendencies:       *"
	echo "*******************************************"
	if [ ! $(which libusb-config) ]; then
		echo "Downloading libusb.pkg"
		wget http://www.ellert.se/PKGS/libusb-2011-10-29/10.7/libusb.pkg.tar.gz
		tar xvfz libusb.pkg.tar.gz
		echo "libusb.pkg  Installation"
		sudo installer -pkg libusb.pkg -target /
	else
		echo "libusb already installed"
	fi
	if [ ! $(which pandoc) ] ; then
		echo "pandoc Installation (pkg)"
		wget http://pandoc.googlecode.com/files/pandoc-1.9.4.1.dmg
		hdiutil attach pandoc-1.9.4.1.dmg
		sudo installer -pkg /Volumes/pandoc\ 1.9.4.1/pandoc-1.9.4.1.pkg -target /
	else
		echo "pandoc already installed"
	fi
	if [ ! $(which tex) ]; then
		echo
		echo "To be able to compile docs"
		echo "YOU NEED TO INSTALL MacTeX"
		echo "http://www.tug.org/mactex/"
		echo "Searching Installer..."
		echo
		mactex=$(mdfind MacTeX-2011.mpkg | grep MacTeX-2011.mpkg)
		if [ ! $mactex ]; then
			echo "Downloading MacTeX"
			wget http://mirror.ctan.org/systems/mac/mactex/MacTeX.mpkg.zip
			unzip MacTeX.mpkg.zip
			open MacTeX-2011.mpkg
		else
			open $mactex
		fi
	else
		echo "tex already installed (dmg)"
	fi
}

installArm() {
	if [ ! -d "$arm_fldr" ]; then
		bash "$MLsource"/toolchain/summon-arm 
	fi
}

remove() {
	 echo "Are you sure to remove all thing installed? Y or N"
	 read install
	 if [ "$install" == Y ] || [ "$install" == y ]; then
			BREW_ML=$"BREW_MLdev"
			for f in $BREW_ML; do
			echo "brew uninstall $f"
#			brew uninstall "$f"
		done
		for f in $PIP_ML; do
			echo "pip uninstall $f"
#			pip uninstall "$f"
		done
	fi
	exit 0
}
###############################################################################
	
checkML() {
	echo -ne "Magic Lantern on $EOS_CARD:"
	if [ -d $EOS_CARD ]; then
		if [ -f $EOS_CARD$BIN ]; then
			echo "FOUND"
		elif [ -d "$arm_fldr" ];then
			echo "NOT FOUND"
			echo "Installing ML on card"
			echo "Type Y to continue N to abort, just enter to skip"
			read inst
			inst=N
			if [ "$inst" == Y ] || [ "$inst" == y ];then
				installDev
				cd "$MLsource"
				make clean
				make install
				bash "$MLsource"/src/make_bootable.sh
				exit 0
			fi
		fi
	else
	echo ""
	echo "NO CARD FOUND! FORMAT IT FROM"
	echo " CAMERA BEFORE USING WITH ML"
	echo ""
	echo "Select a folder with ML generated files"
	read files_fldr
	fi
}

checkRAW() {
	list_file=${z:$cut}
	echo "DBG: List_file: $list_file"
	if [ -f "$files_fldr"/IMG_${list_file:5:4}.CR2 ] && [ ! -f "$files_fldr"/IMG_${list_file:5:4}.JPG ];then
		for img in $list_file; do
			echo "Converting ${img%.*}.CR2 to ${img%.*}.JPG..."
  			/usr/local/bin/convert cr2:"$files_fldr"/"${img%.*}".CR2 "$files_fldr"/"${img%.*}".JPG
		done
	fi
	cd "$files_fldr"
	bash "$file_is"
}
	
checkFILE() {
	if [ "${file_is: -4}" == ".422" ]; then
		echo "CONVERTING $files_fldr/$file_is"
		python $MLsource/src/422-JPG.py "$files_fldr/$file_is"
#	elif [ "${file_is: -4}" == ".CR2" ]; then
#		echo "$CONVERT_RAW_MSG $file_is"
#		/usr/local/bin/convert cr2:$file_dir/$file_is $file_dir/${file_is: -4}.JPG
	elif [ "${file_is: -3}" == ".SH" ]; then
		echo SCRIPT_Found
		if [ "${file_is:0:4}" == "HDR_" ]; then
			a=$(cat "$files_fldr/$file_is" | grep align_image_stack)
			if [ "${a:0:17}" == "align_image_stack" ]; then
				echo HDR
				z=$a
				cut=37
				checkRAW
			else
				echo HDR
				z=$(a=$(cat "$files_fldr/$file_is" | grep enfuse)
				cut=35
				checkRAW
			fi
		elif [ "${file_is:0:4}" == "FST_" ]; then
			echo FST
			cut=104
			checkRAW
		fi
		echo "nothing to convert"
	fi
}

checkFLDR() {
	for f in $(ls "$files_fldr") ; do
		file_is="$f"
		echo "$f"
		checkFILE
	done
}
		
import() {
	echo "Not yet ready"
}
########################################################################

setvar
#options check
if [ ! "$1" ]; then
	checkML
#elif [ "$1" == r ] || [ "$1" == remove ]; then
#	remove
#elif [ "$1" == h ] || [ "$1" == help ]; then
#	help
elif [ ! -d "$MLsource" ] || [ "$1" == i ] || [ "$1" == install ]; then
	installBase
elif [ "$1" == d ] || [ "$1" == dev ]; then
	installDev
elif [ "$1" == sa ] || [ "$1" == summonarm ]; then
	installArm
elif [ -f "$1" ];then
# if the option is a a file use it as source for the script
	file_is=$(basename "$1")
	file_dir=$(dirname "$1")
	echo "FILE SOURCE: $file_dir/$file_is"
	checkFILE
	exit 0
elif [ -d "$1" ]; then
	files_fldr="$1"
fi
	echo "SEARCHING: $files_fldr"
	checkFLDR

#import
echo FINISHED
exit 0