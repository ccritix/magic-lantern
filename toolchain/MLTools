#!/bin/bash

# UNDER DEVELOPMENT, pre-alpha version
# MLTools is a script to preapre your mac for use all
# Magic Lantern features
# more info on Magic lantern: http://www.magiclantern.fm
# on MLTools: http://www.magiclantern.fm/forum/index.php?topic=1019.0

# CHANGE THIS IF YOU WANT
	# folder with magic lanter sources
	MLsource=~/magic-lantern
#	(not used for now)
#	destinatin folder:
#	FINAL_FLDR="$file_source"
#	work_folder=$MLsource/toolchain/MLTool
#	if [ ! -d $work_folder ];then
#		mkdir -p $work_folder
#	fi
	
help() {
	echo ""
	echo "Usage: MLTools [option]"
	echo ""
	echo "At first start this script will check if there are the file"
	echo "needed to perform all conversion, if not here it will install"
	echo "what needed."
	echo ""
	echo "If there is no option set it will try to find and convert"
	echo "all that there is on ML card"
	echo "If there is no ML card it will try to install ML on the "
	echo "eventually avaiable EOS__DIGITAL card mounted and make bootable"
	echo "or it will ask for a folder to search something to convert"
	echo ""
	echo "Options:"
	echo "[folder]     :used for searching something to convert"
	echo "[file]       :used for converting that file"
	echo "h or help    :shows this help"
	echo "i or install :installs base sistem andd clone Unified repo"
	echo "d or dev     :install all the dependencies for the arm"
	echo "              toolchain and starts the summon-arm script"
	echo "remove or r  :uninstall all the dependencies previously installed"
	echo "              it will ask for confirmation"
	exit 0
}
	
setvar() {
	echo "*******************************************"
	echo "*            Checking Options:            *"
	echo "*******************************************"
	# ML installed card address
	EOS_CARD=/Volumes/EOS_DIGITAL/
	# Ml folder on card
	ML_FLDR=ML/
	# ML bin name
	BIN=autoexec.bin
	# folder to check for file to conver on camera
	file_source="$EOS_CARD"DCIM/100CANON

	if [ "$1" == dev ] || [ "$1" == d ] || [ "$1" == remove ] || [ "$1" == r ];then
		BREW_ML="
		binutils
		gmp
		mpfr
		libmpc
		mercurial
		wget
		imagemagick
		ufraw
		mplayer
		poppler"
		
		PIP_ML="
		numpy
		PIL
		matplotlib 
		docutils"
	else
		BREW_ML="
		mercurial
		imagemagick
		mplayer"

		PIP_ML="
		numpy
		PIL"
	fi
}
	
checkBrewPIP() {
	echo "*******************************************"
	echo "*     Checking for Homebrew and PIP...    *"
	echo "*******************************************"
	if [ $(which brew) ]; then
		echo "Homebrew already installed"
	else
		echo "Installing Homebrew..."
		/usr/bin/ruby -e "$(/usr/bin/curl -fsSL https://raw.github.com/mxcl/homebrew/master/Library/Contributions/install_homebrew.rb)"
		echo "Done"
	    brew doctor
	fi
	echo "Updating Homebrew..."
	brew update
	echo "Done"

	if [ $(which pip) ]; then
		echo "pip already installed"
	else
		echo "Installing pip..."
		sudo easy_install pip
		echo "Done"
	fi
	echo "Updating pip..."
	sudo pip install -U pip
	echo "Done"
}
	
installBase() {
	checkBrewPIP
	echo "*******************************************"
	echo "*          Installing Base tools:         *"
	echo "*******************************************"
	for f in $BREW_ML; do
		if [ ! $(brew list | grep "$f") ]; then
		echo "$f Installation (brew)"
		brew install "$f"
		else
		echo "$f already installed (brew)"
		fi
	done	
	for f in $PIP_ML; do
		if [ ! $(pip freeze | grep "$f") ]; then
		echo "$f Installation (pip)"
		sudo pip install "$f"
		else
		echo "$f already installed (pip)"
		fi
	done
	if [ ! $(which enfuse) ]; then
		curl O http://downloads.sourceforge.net/project/enblend/enblend-enfuse/enblend-enfuse-4.0/enblend-enfuse-4.0-mac.tar.gz
		echo "enfuse installation (tar)"
		tar xvfz enblend-enfuse-4.0-mac.tar.gz
		cp enblend-enfuse-4.0-mac/enfuse /usr/bin/
		cp enblend-enfuse-4.0-mac/enblend /usr/bin/
		rm -dR enblend-enfuse-4.0-mac
	else
		echo "enfuse already installed"
	fi
	if [ ! -d "$MLsource" ];then
		cd ~/
		hg clone -r unified https://bitbucket.org/hudson/magic-lantern/  
	fi
}
	
installDev() {
	installBase
	echo "*******************************************"
	echo "*      Installing Dev dipendencies:       *"
	echo "*******************************************"
	if [ ! $(which libusb-config) ]; then
		echo "Downloading libusb.pkg"
		wget http://www.ellert.se/PKGS/libusb-2011-10-29/10.7/libusb.pkg.tar.gz
		tar xvfz libusb.pkg.tar.gz
		echo "libusb.pkg  Installation"
		sudo installer -pkg libusb.pkg -target /
	else
		echo "libusb already installed"
	fi
	if [ ! $(which pandoc) ] ; then
		echo "pandoc Installation (pkg)"
		wget http://pandoc.googlecode.com/files/pandoc-1.9.4.1.dmg
		hdiutil attach pandoc-1.9.4.1.dmg
		sudo installer -pkg /Volumes/pandoc\ 1.9.4.1/pandoc-1.9.4.1.pkg -target /
	else
		echo "pandoc already installed"
	fi
	if [ ! $(which tex) ]; then
		echo
		echo "To be able to compile docs"
		echo "YOU NEED TO INSTALL MacTeX"
		echo "http://www.tug.org/mactex/"
		echo "Searching Installer..."
		echo
		mactex=$(mdfind MacTeX-2011.mpkg | grep MacTeX-2011.mpkg)
		if [ ! $mactex ]; then
			echo "Downloading MacTeX"
			wget http://mirror.ctan.org/systems/mac/mactex/MacTeX.mpkg.zip
			unzip MacTeX.mpkg.zip
			open MacTeX-2011.mpkg
		else
			open $mactex
		fi
	else
		echo "tex already installed (dmg)"
	fi
}
###############################################################################
	
checkML() {
	echo -ne "Magic Lantern on $EOS_CARD:"
	if [ -d $EOS_CARD ]; then
		if [ -f $EOS_CARD$BIN ]; then
			echo "FOUND"
			MLcard="1"
		else
			echo "NOT FOUND"
			#echo "Installing ML on card"
			#echo "Type Y to continue N to abort, just enter to skip"
			#read inst
			inst=N
			if [ "$inst" == Y ] || [ "$inst" == y ];then
				installDev
				cd "$MLsource"
				sudo bash "$MLsource"/toolchain/summon-arm
				make clean
				make install
				bash "$MLsource"/src/make_bootable.sh
				exit 0
			fi
		fi
	else
		echo "NO CARD FOUND! FORMAT IT"
		echo "ON CAMERA BEFORE USING ML"
	echo ""
	echo "Select a folder with ML generated files"
	read file_source
	fi
	}
	
check422() {
	if [ $(find $file_source -name *.422) ]; then
		echo "422 files found"
		python $MLsource/src/422-JPG.py $file_source
	else
		echo "422 files not found"
	fi
}
	
checkFST() {
	FST_script=$(find $file_source -name FST_*.SH)
	if [ $FST_script ]; then
		echo "FST files found"
		for i in $FST_script 
		do
			#check if its raw
			z=$(tail -n +4 $i)
			list_file=${z:108}
			if [ -f $file_source/IMG_${list_file:5:4}.CR2 ];then
				mkdir "$file_source"/FST
				for i in $list_file
					do
						echo "Converting ${i%.*}.CR2 to ${i%.*}.jpg..."
	  					convert cr2:"$file_source"/"${i%.*}".CR2 "$file_source"/"${i%.*}".JPG
					echo "$file_source"/FST/"${i%.*}.JPG" >> raw_list
					mv "$file_source"/"${i%.*}".JPG "$file_source"/FST/"${i%.*}".JPG
				done
				raw_list="$(cat raw_list)"
				raw_list=$(echo -ne $raw_list)
				rm raw_list
				
				enfuse "$@" --exposure-weight=0 --saturation-weight=0 --contrast-weight=1 --hard-mask --output=$file_source/FST/FST_${list_file:5:4}.JPG	$raw_list
				mv ${FST_script:8}/FST_${list_file:5:4}.SH ${FST_script%FST_*}/FST-${list_file:5:4}.SH
#				rm $file_source/HDR/*.JPG
			else
				cd $file_source 
				bash $i
				mv ${FST_script%FST_*}/FST_${i:5:4}.SH ${FST_script%FST*}/FST-${list_file:5:4}.SH
			fi
		done
	else
		echo "FST files not found"
	fi
}

#TIMELAPSE SCRIPT NOT YET CREATED BY ML	
#checkTLV() {
#	TLV_script=$(find "$file_source" -name TLV*.SH)
#	if [ "$TLV_script" ]; then
#		echo "TLV files found"
#	else
#		echo "TLV files not found"
#	fi
#}
	
checkHDR() {
	HDR_script=$(find "$file_source" -name HDR_*.SH)
	echo $HDR_script
	if [ "$HDR_script" ]; then
		echo "HDR files found"
		for i in $HDR_script 
		do
			#check if its raw
			z=$(tail -n +4 $i)
			list_file=${z:35}
			if [ -f $file_source/IMG_${list_file:5:4}.CR2 ];then
				mkdir -p RAW/
				for i in $list_file
					do
						echo "Converting ${i%.*}.CR2 to ${i%.*}.jpg..."
	  					convert cr2:"$file_source"/"${i%.*}".CR2 "$file_source"/"${i%.*}".JPG
					echo "$file_source"/HDR/"${i%.*}.JPG" >> raw_list
					mv "$file_source"/"${i%.*}".JPG "$file_source"/HDR/"${i%.*}".JPG
				done
				raw_list="$(cat raw_list)"
				raw_list=$(echo -ne $raw_list)
				rm raw_list
				
				enfuse "$@" --exposure-weight=0 --saturation-weight=0 --contrast-weight=1 --hard-mask --output=$file_source/HDR/HDR_${list_file:5:4}.JPG	$raw_list
				mv ${HDR_script%HDR_*}/HDR_${list_file:5:4}.SH ${HDR_script%HDR_*}/HDR-${list_file:5:4}.SH
#				rm $file_source/HDR/*.JPG
			else
				cd $file_source 
				bash $i
				mv ${HDR_script%HDR_*}/HDR_${i:5:4}.SH ${HDR_script%HDR_*}/HDR-${list_file:5:4}.SH
			fi
		done
	else
		echo "HDR files not found"
	fi
}
	
checkHDRmov() {
	echo Test_MOVtoHDR
}		
	
remove() {
	 echo "Are you sure to remove all thing installed? Y or N"
	 read install
	 if [ "$install" == Y ] || [ "$install" == y ]; then
		for f in $BREW_ML; do
			echo "brew uninstall $f"
#			brew uninstall "$f"
		done
		for f in $PIP_ML; do
			echo "pip uninstall $f"
#			pip uninstall "$f"
		done
	fi
	exit 0
}

import() {
	echo "Not yey ready"
}
########################################################################

#setting up script
if [ "$1" == h ] || [ "$1" == help ]; then
	help
fi
if [ "$1" == r ] || [ "$1" == remove ]; then
	remove
fi
setvar
if [ ! -d "$MLsource" ] || [ "$1" == i ] || [ "$1" == install ];then
	installBase
fi
if [ "$1" == d ] || [ "$1" == dev ]; then
	installDev
fi

# What to do once started?
#check for file or folder destination options 
if [ ! "$1" ]; then
checkML
	if [ -d "$1" ] || [ -f "$1" ];then
	# if the option is a folder or a file use it as source for the script
		file_source=$1
	fi
fi

# check and convert if found 422 file, focus stack, (to do:HDR pic or HDRvideo, RAW conversion) 
check422 
checkHDR 
checkFST 
#checkTLV 
#checkHDRmov 
#import

exit

##code from Ro-Man on Vimeo (not yet used)##################################
#fps=25
#raw_mov=ls "$EOS_CARD"

splitFrames() {
# fist split movie into stream, png with lowest compression (z=1) seems to be fine and (almost) no quality loss to uncompresssed is observed
mplayer -vo png:z=1 "$raw_mov"
}
imagemagick_dri() {
# taken from wiki.panotools.org/Contrast_Blending by Mark Fink (northernlight.net)
LIGHTBLUR=$2.blurtemp.$$
convert -type GrayScale -blur 40x20 $2 $LIGHTBLUR
composite $1 $2 $LIGHTBLUR -compose atop $3
rm $LIGHTBLUR
}
processFrames() {
noframes=`ls *.png | wc -l`
echo "$noframes frames extracted..."
n=0
for i in `seq 1 2 $noframes`; do
in1=`printf "%08d.png" "$i"`
in2=`printf "%08d.png" "$((i+1))"`
out=`printf "out%08d.jpg" "$n"`
echo "creating HDR frame $out from $in1 and $in2 ..."
enfuse --compression=95 -o $out $in1 $in2
#imagemagick_dri $in1 $in2 $out
let n++
done
}
encodeVideo() {
# 2 stage encoding with mpreg4 codec, settings from mencoder wiki
# optimal_bitrate = (40..60) * 25 * width * height / 256
opts="vbitrate=12150000:mbd=2:keyint=132:v4mv:vqmin=3:vlelim=-4:vcelim=7:lumi_mask=0.07:dark_mask=0.10:naq:vqcomp=0.7:vqblur=0.2:mpeg_quant"
mencoder mf://./out*.jpg -mf w=1920:h=1080:fps="$fps":type=jpg -oac copy -ovc lavc -lavcopts vcodec=mpeg4:vpass=1:$opts -o /dev/null
mencoder mf://./out*.jpg -mf w=1920:h=1080:fps="$fps":type=jpg -oac copy -ovc lavc -lavcopts vcodec=mpeg4:vpass=2:$opts -o output.avi
}
cleanup() {
rm *.png
rm out*.jpg
}
#splitFrames
#processFrames
#encodeVideo
#cleanup

