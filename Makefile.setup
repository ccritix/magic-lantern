# Generic makefile
# Include default and user-customized options where needed
# If you want to customize them copy Makefile.user.default to Makefile.user keeping only the options that you want to customize

include $(TOP_DIR)/Makefile.top

-include $(TOP_DIR)/Makefile.user.default

-include $(TOP_DIR)/Makefile.user

# toolchain setup, based on preferences from Makefile.user.default and Makefile.user

ifneq ("$(wildcard $(PREFERRED_ARM_PATH)/bin/arm-$(ARM_ABI)-gcc$(GCC_VERSION))","")
    # use this one if installed
    ARM_BINPATH=$(PREFERRED_ARM_PATH)/bin
    CROSS_COMPILE=$(ARM_BINPATH)/arm-$(ARM_ABI)-
    CC=$(CROSS_COMPILE)gcc$(GCC_VERSION)
    $(info Using $(CC) (preferred).)
else
    # otherwise, try whatever is installed on the system
    CC=$(shell which arm-$(ARM_ABI)-gcc)
    CROSS_COMPILE=$(shell basename '$(CC)' gcc)
    $(info Using $(CC) (from PATH).)
endif

ifneq ("$(CC)","")
    ARM_LIBGCC_PATH=$(shell $(CC) --print-search-dirs \
        | grep "libraries: =" | tr '=' '\n' | tr ':' '\n' \
        | grep "lib/gcc/arm-$(ARM_ABI)/" | head -n1 | tee foo)
    $(info ARM_LIBGCC_PATH: $(ARM_LIBGCC_PATH))
else
    $(info )
    $(info Please configure a valid ARM cross-compiler.)
    $(info If arm-$(ARM_ABI)-gcc is in your executable path, it will be used.)
    $(info )
    $(info Preferred: gcc 5_4-2016q3 32-bit from https://launchpad.net/gcc-arm-embedded)
    $(info Also fine: gcc-arm-embedded 6.x, Linaro arm-eabi 7.x, gcc-arm-none-eabi from Ubuntu,)
    $(info gcc-arm-embedded from team-gcc-arm-embedded PPA on Ubuntu, others may work as well.)
    $(info )
    $(info For GDB+QEMU, you *must* use a 32-bit version, e.g. gdb-arm-none-eabi:i386,)
    $(info gcc-arm-embedded:i386 from PPA, 32-bit arm-none-eabi-gdb from gcc-arm-embedded.)
    $(info Unfortunately, Linaro's arm-eabi-gdb does not work, whether 32 or 64 bit.)
    $(info )
    $(error )
endif

# used for NEWLIB_PATH and DIETLIBC_PATH in Makefile.user.default
ARM_ABI_LIB=$(ARM_ABI)
ifeq ($(ARM_ABI),eabi)
  # Linaro's "eabi" appears to be compatible with none-eabi; is it the same thing?
  ARM_ABI_LIB=none-eabi
endif

ifeq ($(CONFIG_CCACHE), y)
    CC := $(CCACHE) $(CC)
    HOST_CC := $(CCACHE) $(CC)
endif	

# Quiet the build process
build = \
	@if [ X"$V" = X"1" ]; then \
		echo '$2'; \
	else \
		printf "[ %-8s ]   %s\n"  $1 $@; \
	fi; \
	$2

define rm_files
	@printf "[ RM       ]  %s\n" "$1";
	@$(RM) -f $1
endef

define rm_dir
	@printf "[ RM dir   ]  %s\n" "$1";
	@-$(RM) -rf $1
endef


FLAGS=\
	-Wp,-MMD,$(patsubst %.o,%.d,$(dir $@)$(notdir $@)) \
	-Wp,-MT,$@ \
	-nostdlib \
	-fomit-frame-pointer \
	-fno-strict-aliasing \
	-I$(TOP_DIR)/include

TARGET_COMPILER ?= arm-gcc

CFLAGS =

ifeq ($(TARGET_COMPILER), arm-gcc)
	CFLAGS += -Os -march=armv5te \
				-D__ARM__
endif

CFLAGS +=\
	$(FLAGS) \
	-Wall \
	-Wextra \
	-Wno-unused-parameter \
	-Wno-unused-function \
	-Werror-implicit-function-declaration \
	-Wno-missing-field-initializers \
	-Wno-format \
	-Wdouble-promotion \
	-ffast-math \
	-fsingle-precision-constant \
	-fno-builtin-printf \
	-std=gnu99 \
	-Winline \
	-I$(PLATFORM_INC) \
	-I$(PLATFORM_INC)/include \
	-I$(SRC_DIR) \

# The short-double flag is removed in GCC 6+
GCC_DUMPVERSION := $(shell ${CC} -dumpversion)
ifneq (,$(findstring GCC-4,GCC-$(GCC_DUMPVERSION)))
CFLAGS += -fshort-double
endif
ifneq (,$(findstring GCC-5,GCC-$(GCC_DUMPVERSION)))
CFLAGS += -fshort-double
endif


NOT_USED_FLAGS=\
	-march=armv5te \
	-msoft-float

AFLAGS=\
	$(FLAGS)
    
-LFLAGS=

ifdef CONFIG_SMALL_FONTS
$(error CONFIG_SMALL_FONTS must be renamed to ML_SRC_SMALL_FONTS)
endif

ensureCorrectValue = $(if $(filter $($(1)),y n 1 0), ,$(1)=n $(warning BAD VALUE FOR $(1)=$($(1)) DEFAULTING TO n))
_defined_configs = $(filter CONFIG_%, $(.VARIABLES))
$(foreach config, $(_defined_configs), $(eval $(call ensureCorrectValue,$(config))))
# Functionality that disables all CONFIG_* entries
ifeq ($(ML_SETUP_DISABLE_USER_CONFIGS),y)
#show_config_values=$(foreach c, $(defined_configs), $(c)=$($(c)))
#$(warning before setting to NO $(show_config_values))
$(foreach config, $(_defined_configs), $(eval $(config)=n))
#$(warning after setting to NO $(show_config_values))
endif

-include Makefile.setup.default

-include Makefile.setup.user

ifdef ML_SETUP_EXTENSION
-include Makefile.$(ML_SETUP_EXTENSION).default

-include Makefile.$(ML_SETUP_EXTENSION).user
endif

$(foreach entry, $(_defined_configs), $(eval _CONFIGS-with-$($(entry))+= $(entry)))
# List of defined configs
ML_SETUP_ENABLED_CONFIGS = $(_CONFIGS-with-y)

# List of configs (CONFIG_%) which also have (%_DIR) variable defined
$(foreach entry, $(ML_SETUP_ENABLED_CONFIGS), $(eval _CONFIGS-with-dir-$(origin $(patsubst CONFIG_%,%,$(entry))_DIR)+= $(entry)))
ML_SETUP_CONFIGS_WITH_DIR = $(_CONFIGS-with-dir-file)

CFLAGS += $(CFLAG_USER)
FLAGS += $(LFLAG_USER)
AFLAGS += $(AFLAG_USER)

# install preparing targets are called from both platform and modules
# however, placing these rules at the top will select "install_prepare"
# as the default target, which is not what we want
# fixme: better solution?
.DEFAULT_GOAL := all

install_prepare:
	$(INSTALL_PREPARE)

install_finish:
	$(INSTALL_FINISH)

.PHONY: install_prepare install_finish

prepare_install_dir: install_prepare
	@echo "[ MKDIR    ]   ML directory structure..."
	@$(MKDIR) -p $(INSTALL_ML_DIR)
	@$(MKDIR) -p $(INSTALL_MODULES_DIR)
	@$(MKDIR) -p $(INSTALL_FONTS_DIR)
	@$(MKDIR) -p $(INSTALL_DATA_DIR)
	@$(MKDIR) -p $(INSTALL_CROPMARKS_DIR)
	@$(MKDIR) -p $(INSTALL_SCRIPTS_DIR)
	@$(MKDIR) -p $(INSTALL_DOC_DIR)
