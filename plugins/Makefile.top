#generic makefile
# GCC and other options are pulled from MagicLantern Makefile.user if available
# The path to readelf needs to be configured in symtblgen.rb too
ML_SRC_DIR=$(PLUGIN_BASE_DIR)/../src
SYMTBLGEN=$(PLUGIN_BASE_DIR)/symtblgen.rb

include $(PLUGIN_BASE_DIR)/../Makefile.user.default
-include $(PLUGIN_BASE_DIR)/../Makefile.user

PLUGIN_MAIN_OBJS = $(PLUGIN_BASE_DIR)/plugin.lds $(PLUGIN_BASE_DIR)/entry.o $(PLUGIN_BASE_DIR)/loader.o $(PLUGIN_OBJS)

FLAGS=\
	-Wp,-MMD,$(dir $@).$(notdir $@).d \
	-Wp,-MT,$@ \
	-nostdlib \
	-fomit-frame-pointer \
	-fno-strict-aliasing \
	-DCONFIG_MAGICLANTERN=1 \
	-DCONFIG_$(MODEL)=1 \
	-DRESTARTSTART=$(RESTARTSTART) \
	-DROMBASEADDR=$(ROMBASEADDR) \
	-DVERSION=\"$(VERSION)\" \
	-DCONFIG_DEBUGMSG=$(CONFIG_DEBUGMSG) \

CFLAGS=\
	$(FLAGS) \
	-Os \
	-Wall \
	-W \
	-r \
	-mstructure-size-boundary=32 \
	-Wno-unused-parameter \
	-Wno-implicit-function-declaration \
	-Wno-unused-function \
	-Wno-format \
	-std=gnu99 \
	-D__ARM__ \
	-I$(PLUGIN_DIR) \
	-I$(PLUGIN_BASE_DIR) \
	-I$(ML_SRC_DIR) \
	-mlong-calls \
	-fpic \
	-nostartfiles \
	-ffreestanding

all: $(PLUGIN_NAME).bin

#$(PLUGIN_BASE_DIR)/entry.o: FORCE
#	$(call build,AS,$(CC) $(AFLAGS) -c -o $@ $(PLUGIN_BASE_DIR)/entry.S)

%.s: %.c
	$(call build,CC -S,$(CC) $(CFLAGS) -S -o $@ $<)
%.o: %.c
	$(call build,CC,$(CC) $(CFLAGS) -c -o $@ $<)
%.o: %.c
	$(call build,CC,$(CC) $(CFLAGS) -c -o $@ $<)
%.i: %.c
	$(call build,CPP,$(CC) $(CFLAGS) -E -c -o $@ $<)
%: %.c
	$(call build,LD,$(CC) $(CFLAGS) -o $@ $<)
%.o: %.S
	$(call build,AS,$(CC) $(AFLAGS) -c -o $@ $<)
comma:=,
%.bin.reloc: %
	$(call build,OBJCOPY,$(OBJCOPY) -O binary --set-section-flags .bss=alloc$(comma)load$(comma)contents $< $@)
%.bin: % %.bin.reloc
	$(call build,SYMTBLG,$(SYMTBLGEN) $^ $@)
#%.bin: %
#	$(call build,OBJCOPY,$(OBJCOPY) -O binary --set-section-flags .bss=alloc$(comma)load$(comma)contents $< $@)

$(PLUGIN_BASE_DIR)/loader.c: $(PLUGIN_BASE_DIR)/../platform/all/autoexec.bin
	$(call build,RB,$(PLUGIN_BASE_DIR)/loader_gen.rb)

$(PLUGIN_BASE_DIR)/plugin.lds: $(PLUGIN_BASE_DIR)/plugin.lds.S
	$(call build,CPP,$(CPP) $(CFLAGS) $< | grep -v '^#' > $@)

$(PLUGIN_NAME): $(PLUGIN_MAIN_OBJS)
	$(call build,LD,$(LD) \
		-o $@ \
		-N \
		-nostdlib \
		-mthumb-interwork \
		-march=armv5te \
		-T \
		$^ \
		-lm \
		-lgcc \
    -Xlinker -Map=location.map \
		-Xlinker --emit-relocs \
		-Xlinker -S \
	)

build = \
	@if [ X"$V" = X"1" ]; then \
		echo '$2'; \
	else \
		printf "[ %-8s ]   %s\n"  $1 $@; \
	fi; \
	$2


clean:
	$(call build,CLEAN,$(RM) -f \
		$(PLUGIN_BASE_DIR)/*.o   \
		$(PLUGIN_BASE_DIR)/.*.d \
		$(PLUGIN_BASE_DIR)/.*.a \
		$(PLUGIN_DIR)/*.o   \
		$(PLUGIN_DIR)/.*.d \
		$(PLUGIN_DIR)/.*.a \
		$(PLUGIN_NAME).bin \
		$(PLUGIN_NAME).bin.reloc \
		$(PLUGIN_NAME) \
		$(PLUGIN_BASE_DIR)/plugin.lds)

FORCE:
